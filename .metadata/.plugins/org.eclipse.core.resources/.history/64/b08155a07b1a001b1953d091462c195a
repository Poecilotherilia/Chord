package com.Chord.data;

import java.net.SocketException;
import java.net.UnknownHostException;

import com.Net.Client;
import com.Net.PacketType;
import com.alibaba.fastjson.JSONObject;

public class Node {
	static private Node instance;
	static public Node Instance() {
		return instance;
	}
	private Address addr;
	private Address predecessor;
	private Address successor;
	private FingerTable fingerTable;
	private Node(String ip,int port) {
		this.addr = new Address(ip,port);
		this.fingerTable = new FingerTable();
	}
	
	public static void CreateNewNode(String ip,int port,String seed) throws UnknownHostException, SocketException {
		Node node = new Node(ip,port);
		if(seed.split(":").length < 2) {
			System.out.println("创建新网络 ！！ 初始节点：  ip："+ ip+"  port"+port);
			node.predecessor = new Address(node.addr.GetString());
			return;
		}
		Address seedAddr = new Address(seed);
        JSONObject json = new JSONObject();
        json.put("PacketType", PacketType.FindLocWithCreateNode.ordinal());
        json.put("Address", node.addr.GetString());
		Client.Instance().send(seedAddr.GetIP(), seedAddr.GetPort(),json.toJSONString());
		instance = node;
	}
	
	private boolean isMyLoc(Address aimAddr) {
		if(this.predecessor.HashCode() >= this.addr.HashCode()) {
			if(aimAddr.HashCode() <this.addr.HashCode() | aimAddr.HashCode() > this.predecessor.HashCode()) {
				return true;
			}else {
				return false;
			}
		}else {
			if(aimAddr.HashCode() <this.addr.HashCode() & aimAddr.HashCode() > this.predecessor.HashCode()) {
				return true;
			}else {
				return false;
			}
		}
	}
	
	public void FinddLocWithCreateNode(JSONObject json) {
		Address aimAddr = new Address(json.getString("Address"));
		if(isMyLoc(aimAddr)) {
			
		}
	}
}
